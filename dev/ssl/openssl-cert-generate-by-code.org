#+title: Openssl通过代码生成证书
#+startup: showall

* 1. 创建一个私钥
在我们实际创建证书之前，我们需要创建一个私钥
OpenSSL提供了EVP_PKEY在内存中存储与算法无关的私钥的结构。
这个结构被声明，openssl/evp.h但被包含openssl/x509.h（我们稍后需要），所以你并不需要明确包含头部。

为了分配EVP_PKEY结构，我们使用EVP_PKEY_new：
#+BEGIN_SRC c
  EVP_PKEY * pkey;
  pkey = EVP_PKEY_new();
#+END_SRC
还有一个释放结构的相应函数 - EVP_PKEY_free- 接受一个参数：EVP_PKEY上面初始化的结构。

现在我们需要生成一个密钥。对于我们的例子，我们将生成一个RSA密钥。这是用RSA_generate_key声明的函数完成的openssl/rsa.h。这个函数返回一个指向RSA结构体的指针。
一个简单的函数调用可能如下所示：
#+BEGIN_SRC c
  RSA * rsa;
  rsa = RSA_generate_key(
      2048,   /* number of bits for the key - 2048 is a sensible value */
      RSA_F4, /* exponent - RSA_F4 is defined as 0x10001L */
      NULL,   /* callback - can be NULL if we aren't displaying progress */
      NULL    /* callback argument - not needed in this case */
  );
#+END_SRC
如果返回值RSA_generate_key是NULL，那么出问题了。
如果没有，那么我们现在有一个RSA密钥，我们可以EVP_PKEY从之前将它分配给我们的结构：

#+BEGIN_SRC c
  EVP_PKEY_assign_RSA(pkey, rsa);
#+END_SRC
当RSA结构被释放时，结构将被自动EVP_PKEY释放。

* 创建证书
OpenSSL使用该X509结构来表示内存中的x509证书。这个结构的定义在openssl/x509.h。我们需要的第一个功能是X509_new。它的使用相对简单：
#+BEGIN_SRC c
  X509 * x509;
  x509 = X509_new();
#+END_SRC
就像这样EVP_PKEY，有一个相应的功能来释放结构 - X509_free。

现在我们需要使用一些X509_*函数来设置证书的一些属性：
#+BEGIN_SRC c
  ASN1_INTEGER_set(X509_get_serialNumber(x509), 1);
#+END_SRC
这将我们的证书的序列号设置为'1'。
一些开源HTTP服务器拒绝接受序号为'0'的证书，这是默认设置。

下一步是指定证书实际有效的时间范围。我们通过以下两个函数调用来做到这一点：
#+BEGIN_SRC c
  X509_gmtime_adj(X509_get_notBefore(x509), 0);
  X509_gmtime_adj(X509_get_notAfter(x509), 31536000L);
#+END_SRC
第一行将证书的notBefore属性设置为当前时间。（该X509_gmtime_adj功能将当前时间加上指定的秒数 - 在这种情况下为无。）
第二行将证书的notAfter属性设置为从现在开始的365天（60秒* 60分钟* 24小时* 365天）。

现在我们需要使用我们之前生成的密钥为我们的证书设置公钥：
#+BEGIN_SRC c
  X509_set_pubkey(x509, pkey);
#+END_SRC

由于这是自签名证书，因此我们将发行人的名称设置为主题的名称。该过程的第一步是获取主题名称：
#+BEGIN_SRC c
X509_NAME * name;
name = X509_get_subject_name(x509);
#+END_SRC
如果之前曾在命令行上创建过自签名证书，那么可能会记得要求输入国家代码。

以下是我们提供的组织（'O'）和常用名称（'CN'）：
#+BEGIN_SRC c
  X509_NAME_add_entry_by_txt(name, "C",  MBSTRING_ASC,
                             (unsigned char *)"CA", -1, -1, 0);
  X509_NAME_add_entry_by_txt(name, "O",  MBSTRING_ASC,
                             (unsigned char *)"MyCompany Inc.", -1, -1, 0);
  X509_NAME_add_entry_by_txt(name, "CN", MBSTRING_ASC,
                             (unsigned char *)"localhost", -1, -1, 0);
#+END_SRC
（我在这里使用的值是'CA'，因为我是加拿大人，这是我们的国家代码。还要注意参数＃4需要明确地转换为unsigned char *。）

现在我们可以真正设置发行人姓名：
#+BEGIN_SRC c
  X509_set_issuer_name(x509, name);
#+END_SRC

最后我们准备好执行签名过程。
我们X509_sign用我们之前生成的密钥进行通话。这个代码很简单：
#+BEGIN_SRC c
  X509_sign(x509, pkey, EVP_sha1());
#+END_SRC
请注意，我们使用SHA-1哈希算法来签署密钥。这与mkcert.c我在本答复开头提到的使用MD5 的演示不同。

我们现在有一个自签名证书！但是我们还没有完成 - 我们需要将这些文件写入磁盘。
幸运的是，OpenSSL让我们在那里PEM_*声明了函数openssl/pem.h。我们需要的第一个是PEM_write_PrivateKey保存我们的私钥。
#+BEGIN_SRC c
FILE * f;
f = fopen("key.pem", "wb");
PEM_write_PrivateKey(
    f,                  /* write the key to the file we've opened */
    pkey,               /* our key from earlier */
    EVP_des_ede3_cbc(), /* default cipher for encrypting the key on disk */
    "replace_me",       /* passphrase required for decrypting the key on disk */
    10,                 /* length of the passphrase string */
    NULL,               /* callback for requesting a password */
    NULL                /* data to pass to the callback */
);
#+END_SRC
如果你不想加密私钥，那么只需传递NULL上面的第三个和第四个参数即可。无论哪种方式，您都一定要确保该文件不是世界可读的。
（对于Unix用户，这意味着chmod 600 key.pem。）

呼！现在我们只需要一个功能 - 我们需要将证书写入磁盘。我们需要的功能是PEM_write_X509：
#+BEGIN_SRC c
FILE * f;
f = fopen("cert.pem", "wb");
PEM_write_X509(
    f,   /* write the certificate to the file we've opened */
    x509 /* our certificate */
);
#+END_SRC

我们完成了！希望这个答案中的信息足以让你对一切工作有一个大致的了解，尽管我们几乎没有涉及到OpenSSL的表面。

* 完整代码示例
#+BEGIN_SRC c
  #include <cstdio>
  #include <iostream>

  #include <openssl/pem.h>
  #include <openssl/x509.h>

  /* Generates a 2048-bit RSA key. */
  EVP_PKEY * generate_key() {
      /* Allocate memory for the EVP_PKEY structure. */
      EVP_PKEY * pkey = EVP_PKEY_new();
      if(!pkey) {
          std::cerr << "Unable to create EVP_PKEY structure." << std::endl;
          return NULL;
      }
    
      /* Generate the RSA key and assign it to pkey. */
      RSA * rsa = RSA_generate_key(2048, RSA_F4, NULL, NULL);
      if(!EVP_PKEY_assign_RSA(pkey, rsa)) {
          std::cerr << "Unable to generate 2048-bit RSA key." << std::endl;
          EVP_PKEY_free(pkey);
          return NULL;
      }
    
      /* The key has been generated, return it. */
      return pkey;
  }

  /* Generates a self-signed x509 certificate. */
  X509 * generate_x509(EVP_PKEY * pkey) {
      /* Allocate memory for the X509 structure. */
      X509 * x509 = X509_new();
      if(!x509) {
          std::cerr << "Unable to create X509 structure." << std::endl;
          return NULL;
      }
    
      /* Set the serial number. */
      ASN1_INTEGER_set(X509_get_serialNumber(x509), 1);
    
      /* This certificate is valid from now until exactly one year from now. */
      X509_gmtime_adj(X509_get_notBefore(x509), 0);
      X509_gmtime_adj(X509_get_notAfter(x509), 31536000L);
    
      /* Set the public key for our certificate. */
      X509_set_pubkey(x509, pkey);
    
      /* We want to copy the subject name to the issuer name. */
      X509_NAME * name = X509_get_subject_name(x509);
    
      /* Set the country code and common name. */
      X509_NAME_add_entry_by_txt(name, "C",  MBSTRING_ASC, (unsigned char *)"CA",        -1, -1, 0);
      X509_NAME_add_entry_by_txt(name, "O",  MBSTRING_ASC, (unsigned char *)"MyCompany", -1, -1, 0);
      X509_NAME_add_entry_by_txt(name, "CN", MBSTRING_ASC, (unsigned char *)"localhost", -1, -1, 0);
    
      /* Now set the issuer name. */
      X509_set_issuer_name(x509, name);
    
      /* Actually sign the certificate with our key. */
      if(!X509_sign(x509, pkey, EVP_sha1())) {
          std::cerr << "Error signing certificate." << std::endl;
          X509_free(x509);
          return NULL;
      }
    
      return x509;
  }

  bool write_to_disk(EVP_PKEY * pkey, X509 * x509) {
      /* Open the PEM file for writing the key to disk. */
      FILE * pkey_file = fopen("key.pem", "wb");
      if(!pkey_file) {
          std::cerr << "Unable to open \"key.pem\" for writing." << std::endl;
          return false;
      }
    
      /* Write the key to disk. */
      bool ret = PEM_write_PrivateKey(pkey_file, pkey, NULL, NULL, 0, NULL, NULL);
      fclose(pkey_file);
    
      if(!ret) {
          std::cerr << "Unable to write private key to disk." << std::endl;
          return false;
      }
    
      /* Open the PEM file for writing the certificate to disk. */
      FILE * x509_file = fopen("cert.pem", "wb");
      if(!x509_file) {
          std::cerr << "Unable to open \"cert.pem\" for writing." << std::endl;
          return false;
      }
    
      /* Write the certificate to disk. */
      ret = PEM_write_X509(x509_file, x509);
      fclose(x509_file);
    
      if(!ret) {
          std::cerr << "Unable to write certificate to disk." << std::endl;
          return false;
      }
    
      return true;
  }

  int main(int argc, char ** argv) {
      /* Generate the key. */
      std::cout << "Generating RSA key..." << std::endl;
    
      EVP_PKEY * pkey = generate_key();
      if(!pkey) {
          return 1;
      }

      /* Generate the certificate. */
      std::cout << "Generating x509 certificate..." << std::endl;
    
      X509 * x509 = generate_x509(pkey);
      if(!x509) {
          EVP_PKEY_free(pkey);
          return 1;
      }
    
      /* Write the private key and certificate out to disk. */
      std::cout << "Writing key and certificate to disk..." << std::endl;
    
      bool ret = write_to_disk(pkey, x509);
      EVP_PKEY_free(pkey);
      X509_free(x509);
    
      if(ret) {
          std::cout << "Success!" << std::endl;
          return 0;
      }
      else {
          return 1;
      }
  }
#+END_SRC
